name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Update version in Info.plist
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        VERSION_NUMBER="${VERSION#v}"
        
        # Update CFBundleShortVersionString
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION_NUMBER" RussianPay/Info.plist
        
        # Update CFBundleVersion (build number)
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" RussianPay/Info.plist
        
    - name: Build for release
      run: |
        xcodebuild -project RussianPay.xcodeproj \
                   -scheme RussianPay \
                   -destination 'generic/platform=iOS' \
                   -configuration Release \
                   clean build
                   
    - name: Archive app
      run: |
        xcodebuild -project RussianPay.xcodeproj \
                   -scheme RussianPay \
                   -destination 'generic/platform=iOS' \
                   -configuration Release \
                   archive -archivePath RussianPay.xcarchive
                   
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: RussianPay ${{ steps.version.outputs.VERSION }}
        body: |
          ## üöÄ RussianPay ${{ steps.version.outputs.VERSION }}
          
          ### ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
          - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ Apple Pay –¥–ª—è –†–æ—Å—Å–∏–∏
          - NFC —ç–º—É–ª—è—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ISO 14443-A/B, FeliCa, ISO 15693
          - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Apple Pay API
          - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏ (Bluetooth, Wi-Fi Direct, QR-–∫–æ–¥—ã)
          - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (AES-256-GCM, Curve25519)
          
          ### üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          - iPhone (iOS 14.0+)
          - iPad (iPadOS 14.0+)
          
          ### üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞
          1. –°–∫–∞—á–∞–π—Ç–µ `.ipa` —Ñ–∞–π–ª
          2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ Xcode –∏–ª–∏ AltStore
          3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
          
          ### üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
          - [README](README.md)
          - [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ](BUILD_INSTRUCTIONS.md)
          - [–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub](GITHUB_SETUP.md)
          
          ---
          **RussianPay** - –¥–µ–ª–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö! üá∑üá∫
        files: |
          RussianPay.xcarchive
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
