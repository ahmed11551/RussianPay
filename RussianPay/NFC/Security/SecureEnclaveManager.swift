import Foundation
import Security
import CryptoKit
import LocalAuthentication

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Secure Enclave
class SecureEnclaveManager: ObservableObject {
    
    // MARK: - Properties
    @Published var isAvailable = false
    @Published var biometricType: BiometricType = .none
    @Published var isAuthenticated = false
    
    private let context = LAContext()
    private var biometricContext: LAContext?
    
    // MARK: - Enums
    enum BiometricType {
        case none
        case touchID
        case faceID
        case opticID
        
        var displayName: String {
            switch self {
            case .none: return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            case .touchID: return "Touch ID"
            case .faceID: return "Face ID"
            case .opticID: return "Optic ID"
            }
        }
        
        var icon: String {
            switch self {
            case .none: return "lock"
            case .touchID: return "touchid"
            case .faceID: return "faceid"
            case .opticID: return "eye"
            }
        }
    }
    
    // MARK: - Initialization
    init() {
        setupSecureEnclave()
        setupBiometrics()
    }
    
    // MARK: - Setup
    
    private func setupSecureEnclave() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Secure Enclave
        isAvailable = SecureEnclave.isAvailable
        
        if isAvailable {
            print("üîê Secure Enclave –¥–æ—Å—Ç—É–ø–µ–Ω")
        } else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        }
    }
    
    private func setupBiometrics() {
        var error: NSError?
        
        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {
            switch context.biometryType {
            case .none:
                biometricType = .none
            case .touchID:
                biometricType = .touchID
            case .faceID:
                biometricType = .faceID
            case .opticID:
                biometricType = .opticID
            @unknown default:
                biometricType = .none
            }
        } else {
            biometricType = .none
            print("‚ùå –ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: \(error?.localizedDescription ?? "Unknown error")")
        }
    }
    
    // MARK: - Key Management
    
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ Secure Enclave
    func generateSecureEnclaveKey(tag: String) -> SecureEnclave.P256.KeyAgreement.PrivateKey? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        do {
            let accessControl = SecAccessControlCreateWithFlags(
                kCFAllocatorDefault,
                kSecAttrAccessibleWhenUnlockedThisDeviceOnly,
                [.privateKeyUsage, .biometryAny],
                nil
            )
            
            let key = try SecureEnclave.P256.KeyAgreement.PrivateKey(
                accessControl: accessControl!,
                tag: tag.data(using: .utf8)!
            )
            
            print("üîê –ö–ª—é—á Secure Enclave —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ç–µ–≥–æ–º: \(tag)")
            return key
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ Secure Enclave: \(error)")
            return nil
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ –∏–∑ Secure Enclave
    func loadSecureEnclaveKey(tag: String) -> SecureEnclave.P256.KeyAgreement.PrivateKey? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        do {
            let key = try SecureEnclave.P256.KeyAgreement.PrivateKey(tag: tag.data(using: .utf8)!)
            print("üîê –ö–ª—é—á Secure Enclave –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Ç–µ–≥–æ–º: \(tag)")
            return key
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ Secure Enclave: \(error)")
            return nil
        }
    }
    
    /// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ Secure Enclave
    func deleteSecureEnclaveKey(tag: String) -> Bool {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return false
        }
        
        do {
            try SecureEnclave.P256.KeyAgreement.PrivateKey.delete(tag: tag.data(using: .utf8)!)
            print("üîê –ö–ª—é—á Secure Enclave —É–¥–∞–ª–µ–Ω —Å —Ç–µ–≥–æ–º: \(tag)")
            return true
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ Secure Enclave: \(error)")
            return false
        }
    }
    
    // MARK: - Biometric Authentication
    
    /// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–æ–º–µ—Ç—Ä–∏–∏
    func authenticateWithBiometrics(reason: String = "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Secure Enclave") -> Bool {
        guard biometricType != .none else {
            print("‚ùå –ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return false
        }
        
        let semaphore = DispatchSemaphore(value: 0)
        var success = false
        
        context.evaluatePolicy(
            .deviceOwnerAuthenticationWithBiometrics,
            localizedReason: reason
        ) { result, error in
            success = result
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
            }
            semaphore.signal()
        }
        
        semaphore.wait()
        isAuthenticated = success
        return success
    }
    
    /// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–æ–º–µ—Ç—Ä–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    func authenticateWithBiometricsAsync(reason: String = "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Secure Enclave", completion: @escaping (Bool, Error?) -> Void) {
        guard biometricType != .none else {
            completion(false, NSError(domain: "SecureEnclaveManager", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]))
            return
        }
        
        context.evaluatePolicy(
            .deviceOwnerAuthenticationWithBiometrics,
            localizedReason: reason
        ) { result, error in
            DispatchQueue.main.async {
                self.isAuthenticated = result
                completion(result, error)
            }
        }
    }
    
    // MARK: - Cryptographic Operations
    
    /// –ü–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞ Secure Enclave
    func signData(_ data: Data, with key: SecureEnclave.P256.KeyAgreement.PrivateKey) -> Data? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        do {
            let signature = try key.signature(for: data)
            return signature.rawRepresentation
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            return nil
        }
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ECDH
    func createSharedSecret(publicKey: P256.KeyAgreement.PublicKey, privateKey: SecureEnclave.P256.KeyAgreement.PrivateKey) -> Data? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        do {
            let sharedSecret = try privateKey.sharedSecretFromKeyAgreement(with: publicKey)
            return sharedSecret.withUnsafeBytes { Data($0) }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞: \(error)")
            return nil
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Secure Enclave
    func generateRandomData(length: Int) -> Data? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        var randomData = Data(count: length)
        let result = randomData.withUnsafeMutableBytes { bytes in
            SecRandomCopyBytes(kSecRandomDefault, length, bytes.baseAddress!)
        }
        
        guard result == errSecSuccess else {
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return nil
        }
        
        return randomData
    }
    
    // MARK: - Key Derivation
    
    /// –í—ã–≤–æ–¥ –∫–ª—é—á–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
    func deriveKey(from sharedSecret: Data, context: String) -> SymmetricKey? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        do {
            let contextData = context.data(using: .utf8) ?? Data()
            let derivedKey = HKDF<SHA256>.deriveKey(
                inputKeyMaterial: SymmetricKey(data: sharedSecret),
                salt: contextData,
                outputByteCount: 32
            )
            return derivedKey
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–ª—é—á–∞: \(error)")
            return nil
        }
    }
    
    // MARK: - Payment Token Generation
    
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Secure Enclave
    func generatePaymentToken(amount: Double, merchantId: String, cardData: CardData) -> PaymentToken? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –±–∏–æ–º–µ—Ç—Ä–∏–µ–π
        guard authenticateWithBiometrics(reason: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂") else {
            print("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return nil
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        guard let key = generateSecureEnclaveKey(tag: "payment_\(Date().timeIntervalSince1970)") else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á")
            return nil
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
        let tokenData = createPaymentTokenData(amount: amount, merchantId: merchantId, cardData: cardData)
        
        // –ü–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞
        guard let signature = signData(tokenData, with: key) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω")
            return nil
        }
        
        // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        guard let encryptedToken = encryptToken(tokenData, with: key) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω")
            return nil
        }
        
        return PaymentToken(
            token: encryptedToken.base64EncodedString(),
            timestamp: Date(),
            signature: signature.base64EncodedString(),
            protocol: .iso14443A
        )
    }
    
    private func createPaymentTokenData(amount: Double, merchantId: String, cardData: CardData) -> Data {
        var data = Data()
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã
        let amountBytes = withUnsafeBytes(of: amount) { Data($0) }
        data.append(amountBytes)
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –º–µ—Ä—á–∞–Ω—Ç–∞
        data.append(merchantId.data(using: .utf8) ?? Data())
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
        let maskedCardData = maskCardData(cardData)
        data.append(maskedCardData)
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        let timestamp = Date().timeIntervalSince1970
        let timestampBytes = withUnsafeBytes(of: timestamp) { Data($0) }
        data.append(timestampBytes)
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ nonce
        if let nonce = generateRandomData(length: 16) {
            data.append(nonce)
        }
        
        return data
    }
    
    private func maskCardData(_ cardData: CardData) -> Data {
        var data = Data()
        
        // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PAN
        let maskedPAN = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ \(String(cardData.cardNumber.suffix(4)))"
        data.append(maskedPAN.data(using: .utf8) ?? Data())
        
        // Expiry Date
        data.append(cardData.expiryDate.data(using: .utf8) ?? Data())
        
        // Cardholder Name
        data.append(cardData.cardholderName.data(using: .utf8) ?? Data())
        
        return data
    }
    
    private func encryptToken(_ data: Data, with key: SecureEnclave.P256.KeyAgreement.PrivateKey) -> Data? {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        guard let symmetricKey = generateRandomData(length: 32) else {
            return nil
        }
        
        let key = SymmetricKey(data: symmetricKey)
        
        do {
            let sealedBox = try AES.GCM.seal(data, using: key)
            return sealedBox.combined
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: \(error)")
            return nil
        }
    }
    
    // MARK: - Apple Pay Integration
    
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Apple Pay —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Secure Enclave
    func generateApplePayToken(cardData: CardData, amount: Double, merchantId: String) -> ApplePayToken? {
        guard isAvailable else {
            print("‚ùå Secure Enclave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return nil
        }
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –±–∏–æ–º–µ—Ç—Ä–∏–µ–π
        guard authenticateWithBiometrics(reason: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ Apple Pay –ø–ª–∞—Ç–µ–∂") else {
            print("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return nil
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ñ–µ–º–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        guard let ephemeralKey = generateSecureEnclaveKey(tag: "applepay_\(Date().timeIntervalSince1970)") else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ–µ–º–µ—Ä–∞–ª—å–Ω—ã–π –∫–ª—é—á")
            return nil
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Apple Pay
        let header = createApplePayHeader(ephemeralKey: ephemeralKey)
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        let paymentData = createApplePayPaymentData(cardData: cardData, amount: amount, merchantId: merchantId)
        
        // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        guard let encryptedData = encryptApplePayData(paymentData, with: ephemeralKey) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Apple Pay")
            return nil
        }
        
        return ApplePayToken(
            token: generateApplePayTokenString(),
            paymentData: encryptedData,
            header: header
        )
    }
    
    private func createApplePayHeader(ephemeralKey: SecureEnclave.P256.KeyAgreement.PrivateKey) -> ApplePayHeader {
        let publicKey = ephemeralKey.publicKey
        let publicKeyData = publicKey.rawRepresentation
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        let publicKeyHash = SHA256.hash(data: publicKeyData)
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        let transactionId = generateRandomData(length: 16) ?? Data()
        
        return ApplePayHeader(
            ephemeralPublicKey: publicKeyData,
            publicKeyHash: Data(publicKeyHash),
            transactionId: transactionId
        )
    }
    
    private func createApplePayPaymentData(cardData: CardData, amount: Double, merchantId: String) -> Data {
        var data = Data()
        
        // –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        let cardDataBytes = createEncryptedCardData(cardData)
        data.append(cardDataBytes)
        
        // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        let amountBytes = withUnsafeBytes(of: amount) { Data($0) }
        data.append(amountBytes)
        
        // ID –º–µ—Ä—á–∞–Ω—Ç–∞
        data.append(merchantId.data(using: .utf8) ?? Data())
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        let timestamp = Date().timeIntervalSince1970
        let timestampBytes = withUnsafeBytes(of: timestamp) { Data($0) }
        data.append(timestampBytes)
        
        return data
    }
    
    private func createEncryptedCardData(_ cardData: CardData) -> Data {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
        var cardDataStruct = Data()
        
        // PAN (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        let maskedPAN = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ \(String(cardData.cardNumber.suffix(4)))"
        cardDataStruct.append(maskedPAN.data(using: .utf8) ?? Data())
        
        // Expiry Date
        cardDataStruct.append(cardData.expiryDate.data(using: .utf8) ?? Data())
        
        // Cardholder Name
        cardDataStruct.append(cardData.cardholderName.data(using: .utf8) ?? Data())
        
        // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
        guard let symmetricKey = generateRandomData(length: 32) else {
            return Data()
        }
        
        let key = SymmetricKey(data: symmetricKey)
        
        do {
            let sealedBox = try AES.GCM.seal(cardDataStruct, using: key)
            return sealedBox.combined
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã: \(error)")
            return Data()
        }
    }
    
    private func encryptApplePayData(_ data: Data, with key: SecureEnclave.P256.KeyAgreement.PrivateKey) -> Data? {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        guard let symmetricKey = generateRandomData(length: 32) else {
            return nil
        }
        
        let symKey = SymmetricKey(data: symmetricKey)
        
        do {
            let sealedBox = try AES.GCM.seal(data, using: symKey)
            return sealedBox.combined
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Apple Pay: \(error)")
            return nil
        }
    }
    
    private func generateApplePayTokenString() -> String {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–æ–∫–µ–Ω–∞ Apple Pay
        guard let randomBytes = generateRandomData(length: 32) else {
            return UUID().uuidString
        }
        return randomBytes.base64EncodedString()
    }
    
    // MARK: - Cleanup
    
    /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π Secure Enclave
    func cleanupAllKeys() {
        guard isAvailable else { return }
        
        let keyTags = [
            "payment_\(Date().timeIntervalSince1970)",
            "applepay_\(Date().timeIntervalSince1970)"
        ]
        
        for tag in keyTags {
            _ = deleteSecureEnclaveKey(tag: tag)
        }
        
        print("üßπ –í—Å–µ –∫–ª—é—á–∏ Secure Enclave –æ—á–∏—â–µ–Ω—ã")
    }
}

// MARK: - Supporting Types
struct CardData {
    let cardNumber: String
    let expiryDate: String
    let cvv: String
    let cardholderName: String
    let bankName: String
}

struct PaymentToken {
    let token: String
    let timestamp: Date
    let signature: String
    let protocol: NFCProtocol
}

struct ApplePayToken {
    let token: String
    let paymentData: Data
    let header: ApplePayHeader
}

struct ApplePayHeader {
    let ephemeralPublicKey: Data
    let publicKeyHash: Data
    let transactionId: Data
}

enum NFCProtocol: String {
    case iso14443A = "ISO 14443-A"
    case iso14443B = "ISO 14443-B"
    case feliCa = "FeliCa"
    case iso15693 = "ISO 15693"
}
