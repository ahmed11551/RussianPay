import Foundation
import Network

/// Wi-Fi Direct —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
class WiFiDirectService: NSObject, ObservableObject {
    
    // MARK: - Properties
    @Published var isHosting = false
    @Published var isConnected = false
    @Published var connectedHost: NWEndpoint?
    
    private var listener: NWListener?
    private var connection: NWConnection?
    private let serviceType = "russianpay-wifi"
    private let port: NWEndpoint.Port = 8888
    
    // MARK: - Hosting (Server)
    func startHosting() {
        do {
            listener = try NWListener(using: .tcp, on: port)
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Wi-Fi Direct —Å–µ—Ä–≤–µ—Ä–∞: \(error)")
            return
        }
        
        listener?.stateUpdateHandler = { state in
            switch state {
            case .ready:
                self.isHosting = true
                print("üü¢ Wi-Fi Direct —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \(self.port)")
            case .failed(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(error)")
                self.isHosting = false
            default:
                break
            }
        }
        
        listener?.newConnectionHandler = { [weak self] newConnection in
            self?.connection = newConnection
            self?.setupConnectionHandlers(newConnection)
            newConnection.start(queue: .main)
            self?.isConnected = true
            print("üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ Wi-Fi Direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        }
        
        listener?.start(queue: .main)
    }
    
    func stopHosting() {
        listener?.cancel()
        listener = nil
        isHosting = false
        isConnected = false
        print("üõë Wi-Fi Direct —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - Connecting (Client)
    func connectToHost(host: NWEndpoint.Host) {
        connection = NWConnection(host: host, port: port, using: .tcp)
        setupConnectionHandlers(connection)
        connection?.start(queue: .main)
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi Direct —Ö–æ—Å—Ç—É: \(host)")
    }
    
    func disconnect() {
        connection?.cancel()
        connection = nil
        isConnected = false
        print("üîå Wi-Fi Direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
    }
    
    // MARK: - Data Transfer
    func sendPaymentData(_ data: Data) {
        guard let connection = connection else { return }
        connection.send(content: data, completion: .contentProcessed { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            } else {
                print("üí∏ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Wi-Fi Direct")
            }
        })
    }
    
    private func setupConnectionHandlers(_ connection: NWConnection?) {
        connection?.stateUpdateHandler = { state in
            switch state {
            case .ready:
                self.isConnected = true
                print("üü¢ Wi-Fi Direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
            case .failed(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: \(error)")
                self.isConnected = false
            case .cancelled:
                self.isConnected = false
            default:
                break
            }
        }
        receiveNextMessage(connection)
    }
    
    private func receiveNextMessage(_ connection: NWConnection?) {
        connection?.receive(minimumIncompleteLength: 1, maximumLength: 4096) { data, _, isComplete, error in
            if let data = data, !data.isEmpty {
                self.handleReceivedData(data)
            }
            if isComplete == false && error == nil {
                self.receiveNextMessage(connection)
            }
        }
    }
    
    private func handleReceivedData(_ data: Data) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("üí≥ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Wi-Fi Direct: \(data.count) –±–∞–π—Ç")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
    }
} 